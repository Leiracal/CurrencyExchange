// <auto-generated />
using System;
using CurrencyExchange.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CurrencyExchange.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250513221120_SeedWalletBadIDFix")]
    partial class SeedWalletBadIDFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CurrencyExchange.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<int>("OrderTypeID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Remaining")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("OrderTypeID");

                    b.ToTable("orders");

                    b.HasData(
                        new
                        {
                            OrderID = 1,
                            CreatedAt = new DateTime(2025, 5, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            OrderStatusID = 1,
                            OrderTypeID = 1,
                            Price = 200m,
                            Quantity = 50,
                            Remaining = 50,
                            UserID = "953c886e-ac7b-45cd-9f70-30eaca6a5890",
                            UserName = ""
                        },
                        new
                        {
                            OrderID = 2,
                            CreatedAt = new DateTime(2025, 5, 2, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            OrderStatusID = 1,
                            OrderTypeID = 1,
                            Price = 100m,
                            Quantity = 50,
                            Remaining = 50,
                            UserID = "606f3c31-f721-4faf-9cd9-ed96c8b11f72",
                            UserName = ""
                        },
                        new
                        {
                            OrderID = 3,
                            CreatedAt = new DateTime(2025, 5, 3, 8, 45, 0, 0, DateTimeKind.Unspecified),
                            OrderStatusID = 1,
                            OrderTypeID = 2,
                            Price = 300m,
                            Quantity = 50,
                            Remaining = 50,
                            UserID = "508f1f2c-21c8-42d9-806f-2cafc487bbc2",
                            UserName = ""
                        },
                        new
                        {
                            OrderID = 4,
                            CreatedAt = new DateTime(2025, 5, 4, 16, 5, 0, 0, DateTimeKind.Unspecified),
                            OrderStatusID = 1,
                            OrderTypeID = 2,
                            Price = 400m,
                            Quantity = 50,
                            Remaining = 50,
                            UserID = "6d9715bc-eecb-4135-8e0e-8a9efd3139e3",
                            UserName = ""
                        });
                });

            modelBuilder.Entity("CurrencyExchange.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusID"), 1L, 1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusID");

                    b.ToTable("orderStatuses");

                    b.HasData(
                        new
                        {
                            OrderStatusID = 1,
                            Status = "Open"
                        },
                        new
                        {
                            OrderStatusID = 2,
                            Status = "Partial"
                        },
                        new
                        {
                            OrderStatusID = 3,
                            Status = "Filled"
                        },
                        new
                        {
                            OrderStatusID = 4,
                            Status = "Cancelled"
                        });
                });

            modelBuilder.Entity("CurrencyExchange.Models.OrderType", b =>
                {
                    b.Property<int>("OrderTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderTypeID"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderTypeID");

                    b.ToTable("orderTypes");

                    b.HasData(
                        new
                        {
                            OrderTypeID = 1,
                            Type = "Buy"
                        },
                        new
                        {
                            OrderTypeID = 2,
                            Type = "Sell"
                        });
                });

            modelBuilder.Entity("CurrencyExchange.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"), 1L, 1);

                    b.Property<int>("BuyOrderID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SellOrderID")
                        .HasColumnType("int");

                    b.HasKey("TransactionID");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("CurrencyExchange.Models.Wallet", b =>
                {
                    b.Property<int>("WalletID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletID"), 1L, 1);

                    b.Property<decimal>("RMTBalance")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("RMTLocked")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("VCBalance")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("VCLocked")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("WalletID");

                    b.ToTable("wallets");

                    b.HasData(
                        new
                        {
                            WalletID = 1334,
                            RMTBalance = 20000.0m,
                            RMTLocked = 10000.0m,
                            UserID = "953c886e-ac7b-45cd-9f70-30eaca6a5890",
                            VCBalance = 1000m,
                            VCLocked = 0m
                        },
                        new
                        {
                            WalletID = 1335,
                            RMTBalance = 20000.0m,
                            RMTLocked = 5000.0m,
                            UserID = "606f3c31-f721-4faf-9cd9-ed96c8b11f72",
                            VCBalance = 1000m,
                            VCLocked = 0m
                        },
                        new
                        {
                            WalletID = 1336,
                            RMTBalance = 20000.0m,
                            RMTLocked = 0.0m,
                            UserID = "508f1f2c-21c8-42d9-806f-2cafc487bbc2",
                            VCBalance = 1000m,
                            VCLocked = 50m
                        },
                        new
                        {
                            WalletID = 1337,
                            RMTBalance = 20000.0m,
                            RMTLocked = 0.0m,
                            UserID = "6d9715bc-eecb-4135-8e0e-8a9efd3139e3",
                            VCBalance = 1000m,
                            VCLocked = 50m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "953c886e-ac7b-45cd-9f70-30eaca6a5890",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "031f46cd-c05b-4ad7-a4df-f09b27688bc2",
                            Email = "aardvark@abbatoir.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AARDVARK@ABBATOIR.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM8DNhsKKQxKSgg7uwbHwLq89jZfLkeVfg+dWcEtUI6Cna+U8KLYMPb6c47ci5k5uA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a05fa144-b85e-44cf-940a-662475bf95ad",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "606f3c31-f721-4faf-9cd9-ed96c8b11f72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "595f3243-8bd4-46a0-bf93-325fd93859b2",
                            Email = "aiko@aikowu.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AIKO@AIKOWU.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM8DNhsKKQxKSgg7uwbHwLq89jZfLkeVfg+dWcEtUI6Cna+U8KLYMPb6c47ci5k5uA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76262885-1b8f-43a1-9f06-d047de38157d",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "508f1f2c-21c8-42d9-806f-2cafc487bbc2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "829d1970-da2c-4e7b-91ef-8205b34620e7",
                            Email = "kaneda@kuroda.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KANEDA@KURODA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM8DNhsKKQxKSgg7uwbHwLq89jZfLkeVfg+dWcEtUI6Cna+U8KLYMPb6c47ci5k5uA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0846375b-8b4e-4fb6-9b67-4800f25ae922",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "6d9715bc-eecb-4135-8e0e-8a9efd3139e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a386b78-1608-4eb3-9aa4-766601a502c3",
                            Email = "yuniq@epoch.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "YUNIQ@EPOCH.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM8DNhsKKQxKSgg7uwbHwLq89jZfLkeVfg+dWcEtUI6Cna+U8KLYMPb6c47ci5k5uA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d8c59d5-5625-498d-9cf1-931ec905554b",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CurrencyExchange.Models.Order", b =>
                {
                    b.HasOne("CurrencyExchange.Models.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CurrencyExchange.Models.OrderType", "Type")
                        .WithMany()
                        .HasForeignKey("OrderTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
